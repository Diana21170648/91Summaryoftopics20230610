【Day 27 】2023-07-06 - 35. 搜索插入位置 #28
Open
azl397985856 opened this issue 20 hours ago · 10 comments
Comments
@azl397985856
azl397985856 commented 20 hours ago
35. 搜索插入位置
入选理由
暂无

题目地址
https://leetcode-cn.com/problems/search-insert-position

前置知识
暂无

题目描述
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

你可以假设数组中无重复元素。

示例 1:

输入: [1,3,5,6], 5
输出: 2
示例 2:

输入: [1,3,5,6], 2
输出: 1
示例 3:

输入: [1,3,5,6], 7
输出: 4
示例 4:

输入: [1,3,5,6], 0
输出: 0

@Diana21170648
Diana21170648 commented now
思路
二分+双指针

代码
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        if not nums:
            return 0
        
        left=0
        right=len(nums)-1
        while left<=right:
            mid=(left+right)//2
            if nums[mid]==target:
                return mid
            if nums[mid]<target:
                left=mid+1
            else:
                right=mid-1
        return left
复杂度分析

时间复杂度：O(logn)，其中 N 为数组长度。
空间复杂度：O(1)

@azl397985856 azl397985856 added 双指针 二分 27 labels 20 hours ago
@Beanza
Beanza commented 18 hours ago
class Solution {
public int searchInsert(int[] nums, int target) {
if (nums.length == 0) return -1;

    int left = 0;
    int right = nums.length - 1;

    while (left <= right) {

        int mid = left + (right - left) / 2;
        if (target > nums[mid]) {
            left = mid + 1;
        } else if (target < nums[mid]) {
            right = mid - 1;
        } else if (target == nums[mid]){
            return mid;
        }
    }

    return left;
}
}

@bi9potato
bi9potato commented 17 hours ago
Approach
Binary search, cuz the array is sorted and the limitation of time complexity is 
.

Code
class Solution {

    private int target;

    public int searchInsert(int[] nums, int target) {

        this.target = target;

        return bs(nums, 0, nums.length-1);
        
    }

    private int bs(int[] nums, int l, int r) {

        if ( l >= r) {
            if (nums[l] < target) {
                return l+1;
            } else {
                return l;
            }
        }

        int mid = l + ((r-l) >> 1);
        // System.out.println(mid);

        if (nums[mid] > target) {
            return bs(nums, l, mid-1);
        } else if (nums[mid] < target) {
            return bs(nums, mid+1, r);
        } else {
            return mid;
        }
    }
}
Complexity Analysis
Time 
Space 
, cuz the height of the recursion stack is 
.
@catkathy
catkathy commented 14 hours ago
思路
binary search

Code
        left, right = -1, len(nums)
        while left + 1 != right:
            mid = (left + right) // 2
            if nums[mid] < target:
                left = mid
            else:
                right = mid
        return right
@freesan44
freesan44 commented 12 hours ago
class Solution {
    func searchInsert(_ nums: [Int], _ target: Int) -> Int {
        var l = 0
    var r = nums.count - 1

    while l <= r {
        let mid = (l + r) / 2
        if nums[mid] == target {
            return mid
        }
        if nums[mid] < target {
            l = mid + 1
        } else {
            r = mid - 1
        }
    }
    return l
    }
}
@mo660
mo660 commented 10 hours ago
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int len = nums.size();
        int l = 0, r = len - 1;
        while (l <= r)
        {
            int mid = (r - l)/2 + l;
            if(nums[mid] >= target){
                r = mid - 1;
            }else{
                l = mid + 1;
            }
        }
        return l;
    }
};
@zhaoygcq
zhaoygcq commented 9 hours ago
思路
二分查找

代码
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var searchInsert = function(nums, target) {
    let left = 0;
    let right = nums.length - 1;
    while(left <= right) {
        let middleIndex = Math.floor(left + (right - left) / 2)
        let middle = nums[middleIndex];
        if(target === middle) {
            return middleIndex;
        } else if(target > middle) {
            left = middleIndex + 1;
        } else {
            right = middleIndex - 1;
        }
    }
    return left;
};
复杂度分析

时间复杂度：O(NlogN)，其中 N 为数组长度。
空间复杂度：O(1)
@huizsh
huizsh commented 4 hours ago
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        l = 0
        r = len(nums) - 1

        while(l<=r):
            mid = (l+r)//2
            if nums[mid] == target:
                return mid
            if nums[mid] < target:
                l = mid + 1
            else:
                r = mid - 1
        return l

@SoSo1105
SoSo1105 commented 4 hours ago
思路
将整个数组看成一条线段，将这条线断从中间切开，查看线段中间位置所在的值和插入数之间的大小关系，根据此大小关系可以抛弃一半线段。

代码
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)-1            # 初始化左右端点位置
        while left <= right:                    # 当条件合法时
            mid = left + (right - left) // 2    # 获取中点，如果是偶数取靠左的位置
            if nums[mid] == target:             # 找到该数
                return mid                      # 直接返回
            elif nums[mid] > target:            # 如果当前位置数比插入值大
                right = mid - 1                 # 更新右端点
            else:                               # 如果当前位置数比插入值小
                left = mid + 1                  # 更新左端点
        return left  
复杂度分析

时间复杂度：O(N)
空间复杂度：O(1)
@snmyj
snmyj commented 3 hours ago
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
         int l=0,r=nums.size()-1;
         int mid;
         while(l<=r){
             mid=(l+r)/2;
             if(target>nums[mid]) l=mid+1;
             else  r=mid-1;
         }
         return l;
    }
};
